{"version":3,"sources":["App.js","index.js"],"names":["padTime","time","toString","padStart","App","useState","title","setTitle","timeLeft","setTimeLeft","isRunning","setIsRunning","intervalRef","useRef","resetTimer","clearInterval","current","minutes","Math","floor","seconds","className","onClick","setInterval","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wOAGA,SAASA,EAAQC,GACf,OAAOA,EAAKC,WAAWC,SAAS,EAAG,KAgEtBC,MA7Df,WAAgB,IAAD,EAEaC,mBAAS,2BAFtB,mBAENC,EAFM,KAECC,EAFD,OAImBF,mBAAS,MAJ5B,mBAING,EAJM,KAIIC,EAJJ,OAMqBJ,oBAAS,GAN9B,mBAMNK,EANM,KAMKC,EANL,KAQTC,EAAcC,iBAAO,MAyBnBC,EAAa,WACjBC,cAAcH,EAAYI,SAC1BJ,EAAYI,QAAU,KACtBT,EAAS,8BACTE,EAAY,MACZE,GAAa,IAGXM,EAAUjB,EAAQkB,KAAKC,MAAMX,EAAW,KACxCY,EAAUpB,EAAQQ,EAAqB,GAAVS,GAEjC,OACE,sBAAKI,UAAU,MAAf,UACE,6BAAKf,IACL,sBAAKe,UAAU,QAAf,UACE,+BAAOJ,IACP,qCACA,+BAAOG,OAET,sBAAKC,UAAU,UAAf,WACKX,GAAa,wBAAQY,QA3CX,WACU,OAAxBV,EAAYI,UACfT,EAAS,uBACTI,GAAcD,GACdE,EAAYI,QAAUO,aAAY,WAChCd,GAAY,SAAAD,GACV,OAAGA,GAAY,EACPA,EAAW,GAEnBM,IACQ,QAET,OA+BiB,mBACdJ,GAAY,wBAAQY,QA7BV,WACW,OAAxBV,EAAYI,UACfD,cAAcH,EAAYI,SAC1BJ,EAAYI,QAAU,KACtBT,EAAS,eACTI,GAAcD,KAwBI,kBACd,wBAAQY,QAASR,EAAjB,0BCzDRU,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.11fc7c1f.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react';\nimport './App.css';\n\nfunction padTime(time) {\n  return time.toString().padStart(2, '0')\n}\n\nfunction App() {\n\n  const [title, setTitle] = useState('Let the countdown begin')\n\n  const [timeLeft, setTimeLeft] = useState(25 * 60)\n\n  const [isRunning, setIsRunning] = useState(false)\n\n  let intervalRef = useRef(null)\n\n  const startTimer = () => {\n    if(intervalRef.current !== null) return\n    setTitle(`You're doing great!`)\n    setIsRunning(!isRunning)\n    intervalRef.current = setInterval(() => {\n      setTimeLeft(timeLeft => {\n        if(timeLeft >= 1) {\n         return timeLeft - 1\n        }\n        resetTimer()\n         return 0\n      })\n    }, 1000);\n  }\n\n  const stopTimer = () => {\n    if(intervalRef.current === null) return\n    clearInterval(intervalRef.current)\n    intervalRef.current = null\n    setTitle('Keep it up!')\n    setIsRunning(!isRunning)\n  }\n\n  const resetTimer = () => {\n    clearInterval(intervalRef.current)\n    intervalRef.current = null\n    setTitle('Ready to go another round?')\n    setTimeLeft(25 * 60)\n    setIsRunning(false)\n  }\n\n  let minutes = padTime(Math.floor(timeLeft / 60))\n  let seconds = padTime(timeLeft - minutes * 60)\n\n  return (\n    <div className=\"App\">\n      <h2>{title}</h2>\n      <div className=\"timer\">\n        <span>{minutes}</span>\n        <span>:</span>\n        <span>{seconds}</span>\n      </div>\n      <div className=\"buttons\">\n        { !isRunning && <button onClick={startTimer}>Start</button>}\n        { isRunning &&<button onClick={stopTimer}>Stop</button>}\n        <button onClick={resetTimer}>Reset</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}